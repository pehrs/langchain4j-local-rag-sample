


prompt.template = """System: You are a friendly chatbot assistant that responds in a conversational manner to users' questions.
Respond in 1-2 complete sentences, unless specifically asked by the user to elaborate on something.
Use Context to inform your answers.
---
Context: {{contents}}
---
User: {{userMessage}}
"""



chat: {
  minScore: 0.88
  maxResults: 5
}

embeddings: {
  # one of "in-memory", "vespa" or "opensearch"
  store = "vespa"

  // Class name of the DocumentsReader to use
  // documentsReader = "com.pehrs.langchain4j.rss.RssFeedReader"
  documentsReader = "com.pehrs.langchain4j.epub.EpubDocumentsReader"

  // Embeddings are saved in batches
  batchSize: 40

  // Segmentation:
  // for details on these take a look at
  // dev.langchain4j.data.document.splitter.DocumentSplitters
  segments: {
    maxSegmentSizeInTokens: 1000
    maxOverlapSizeInTokens: 200
  }
}

rss.feeds: [
  // https://about.fb.com/wp-content/uploads/2016/05/rss-urls-1.pdf
  // "http://rss.cnn.com/rss/cnn_topstories.rss" // Wierd results from CNN!!!
  "https://feeds.bbci.co.uk/news/world/rss.xml"
  "https://feeds.npr.org/1004/rss.xml"
  "https://feeds.nbcnews.com/nbcnews/public/world"
  "https://chaski.huffpost.com/us/auto/vertical/world-news"
]

epub: {
  dir = "books"
}

ollama {
  baseUrl: "http://127.0.0.1:11434"
  modelName = "mistral:latest"
  timeout: "120s"
  maxRetries: 3
}

vespa {
  url: "http://localhost:8080/"
  timeout: "5s"
  avoidDups: true
  ns: "embeddings"
  docType: "books"
  // docType: "news"

  // Class name of the VespaDocumentHandler to use
  // vespaDocumentHandler: "com.pehrs.langchain4j.vespa.RssNewsVespaDocHandler"
  vespaDocumentHandler: "com.pehrs.langchain4j.vespa.EpubVespaDocHandler"
}

opensearch {
  url: "https://localhost:9200"
  username: "admin"
  passwordEnvVar: "OPENSEARCH_INITIAL_ADMIN_PASSWORD"
  index: "code_embeddings"
}
